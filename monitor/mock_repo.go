// Code generated by MockGen. DO NOT EDIT.
// Source: UptimeMonitoringService/monitor (interfaces: RepositoryController)

// Package monitor is a generated GoMock package.
package monitor

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryController is a mock of RepositoryController interface
type MockRepositoryController struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryControllerMockRecorder
}

// MockRepositoryControllerMockRecorder is the mock recorder for MockRepositoryController
type MockRepositoryControllerMockRecorder struct {
	mock *MockRepositoryController
}

// NewMockRepositoryController creates a new mock instance
func NewMockRepositoryController(ctrl *gomock.Controller) *MockRepositoryController {
	mock := &MockRepositoryController{ctrl: ctrl}
	mock.recorder = &MockRepositoryControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryController) EXPECT() *MockRepositoryControllerMockRecorder {
	return m.recorder
}

// databaseCreate mocks base method
func (m *MockRepositoryController) databaseCreate(arg0 *URLData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseCreate indicates an expected call of databaseCreate
func (mr *MockRepositoryControllerMockRecorder) databaseCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseCreate", reflect.TypeOf((*MockRepositoryController)(nil).databaseCreate), arg0)
}

// databaseDelete mocks base method
func (m *MockRepositoryController) databaseDelete(arg0 *URLData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseDelete indicates an expected call of databaseDelete
func (mr *MockRepositoryControllerMockRecorder) databaseDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseDelete", reflect.TypeOf((*MockRepositoryController)(nil).databaseDelete), arg0)
}

// databaseGet mocks base method
func (m *MockRepositoryController) databaseGet(arg0 *URLData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseGet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseGet indicates an expected call of databaseGet
func (mr *MockRepositoryControllerMockRecorder) databaseGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseGet", reflect.TypeOf((*MockRepositoryController)(nil).databaseGet), arg0)
}

// databaseSave mocks base method
func (m *MockRepositoryController) databaseSave(arg0 *URLData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseSave", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseSave indicates an expected call of databaseSave
func (mr *MockRepositoryControllerMockRecorder) databaseSave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseSave", reflect.TypeOf((*MockRepositoryController)(nil).databaseSave), arg0)
}
