// Code generated by MockGen. DO NOT EDIT.
// Source: UptimeMonitoringService/monitor (interfaces: HttpController)

// Package monitor is a generated GoMock package.
package monitor

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHttpController is a mock of HttpController interface
type MockHttpController struct {
	ctrl     *gomock.Controller
	recorder *MockHttpControllerMockRecorder
}

// MockHttpControllerMockRecorder is the mock recorder for MockHttpController
type MockHttpControllerMockRecorder struct {
	mock *MockHttpController
}

// NewMockHttpController creates a new mock instance
func NewMockHttpController(ctrl *gomock.Controller) *MockHttpController {
	mock := &MockHttpController{ctrl: ctrl}
	mock.recorder = &MockHttpControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpController) EXPECT() *MockHttpControllerMockRecorder {
	return m.recorder
}

// makeHTTPGetRequest mocks base method
func (m *MockHttpController) makeHTTPGetRequest(arg0 int, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeHTTPGetRequest", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// makeHTTPGetRequest indicates an expected call of makeHTTPGetRequest
func (mr *MockHttpControllerMockRecorder) makeHTTPGetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeHTTPGetRequest", reflect.TypeOf((*MockHttpController)(nil).makeHTTPGetRequest), arg0, arg1)
}
